# model fields
# https://docs.djangoproject.com/en/5.1/ref/models/fields/
# https://docs.djangoproject.com/en/5.1/ref/models/

# SQL Query of Migration
python manage.py sqlmigrate blog 0001


# Super User
python manage.py createsuperuser
admin



# MODELS #
# Manager Methods
# Order Randomly
Post.objects.order_by('?')

# Inner Join via Foreign Key
Post.objects.filter(author__username='admin')


************** MIGRATIONS ***************
    EMPTY MIGRATIONS
    python manage.py makemigrations --name=trigram_ext --empty blog


# For Complex Queries use Q object (for OR etc)
 >>> from django.db.models import Q
 >>> starts_who = Q(title__istartswith='who')
 >>> starts_why = Q(title__istartswith='why')
 >>> Post.objects.filter(starts_who | starts_why)

 More on this - https://docs.djangoproject.com/en/5.0/topics/db/queries/#complex-lookups-with-q-objects.
 More on Querysets - https://docs.djangoproject.com/en/5.0/ref/models/querysets/
 More on Quries - https://docs.djangoproject.com/en/5.0/topics/db/queries/




 # DJANGO TEMPLATE LANGUAGE
 https://docs.djangoproject.com/en/5.0/ref/templates/language/
 https://docs.djangoproject.com/en/5.0/ref/templates/builtins/

 **************   TEMPLATE STUFF ***************
     -- Built in Tags and Filters
     https://docs.djangoproject.com/en/5.0/ref/templates/builtins/


     ', '.join(list) equals
     {{ post.tags.all|join:", " }}
     {{ post.body|truncatewords:30|linebreaks }}

     CUSTOM TAGS
     • simple_tag: Processes the given data and returns a string
     • inclusion_tag: Processes the given data and returns a rendered template



 **************   DOCKER STUFF ***************

    docker run --name=blog_db -e POSRGRES_DB=blog -e POSTGRES_USER=blog -e POSTGRES_PASSWORD=xxxxx -p 5432:5432 -d postgres:16.2

       POSTGRES_DB: Name of the PostgreSQL database. If not defined, the value of POSTGRES_USER is used for the database name.
     • POSTGRES_USER: Used in conjunction with POSTGRES_PASSWORD to define a username and password. The user is created with superuser power.
     • POSTGRES_PASSWORD: Sets the superuser password for PostgreSQL

     The -e option is to define environment variables for the instance
     The -p option is used to publish the 5432 port, on which PostgreSQL runs, to the same host interface port.
     The -d option is for detached mode, which runs the Docker container in the background



  **************  SQLLITE TO POSTGRES ***************

        # Dumps existing model and data related into to Json file
        python manage.py dumpdata --indent=2 --output=mysite_data.json
        OR (if you get encoding error)
        python -Xutf8 manage.py dumpdata --indent=2 --output=mysite_data.json

        python manage.py migrate (to create the tables)
        >>>> python manage.py loaddata mysite_data.json (to load the data)

        # Advanced Text Search in Postgres
        select
            *
        from
            "blog_post"
        where
            to_tsvector(coalesce("blog_post"."title", '')) @@ (plainto_tsquery('django'))
        order by
            "blog_post"."publish" desc;

          More - https://docs.djangoproject.com/en/5.0/ref/contrib/postgres/search/#searchvector